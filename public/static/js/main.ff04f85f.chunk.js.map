{"version":3,"sources":["actions.js","reducers.js","components/TodayInHistoryList.js","containers/TodayInHistoryListContainer.js","containers/SavedTriviaListContainer.js","components/SavedTriviaList.js","components/CurrentEventsList.js","containers/CurrentEventsListContainer.js","components/Nav.js","containers/HomeContainer.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["require","config","actionSaveTrivia","trivia","type","payload","defaultState","saved","Object","keys","window","localStorage","map","item","getItem","sort","events","births","deaths","film","music","sports","currentNews","sportsNews","randomQuestion","randomAnswer","TodayInHistoryList","props","_handleToggle","text","setState","topic","_updateSaved","state","optionsList","this","length","getTrivia","handleSelect","topicList","toLowerCase","i","buttonText","includes","className","key","onClick","id","name","value","htmlFor","React","Component","reduxConnector","connect","dispatch","a","date","Date","todayTitle","getMonth","getDate","url","axios","get","result","pageId","data","query","pages","listWithLI","extract","split","todaysData","currentArr","slice","obj","process","REACT_APP_APIFY_KEY","linkData","musicData","triviaList","handleDelete","actionDelTrivia","handleReset","triviaListItems","RecentSports","getCurrentNews","getSportsNews","newsList","title","href","rel","target","displayText","REACT_APP_newsAPI_KEY","articles","CurrentEventsList","Nav","src","alt","to","question","answer","getQuestionAnswer","apikey","asyncActionGetQuestionAnswer","useState","hidden","setHidden","useEffect","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","action","newState","push","setItem","splice","removeItem","clear","applyMiddleware","ReduxThunk","App","exact","path","component","Home","SavedTriviaList","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qUACeA,EAAQ,IAAUC,SAe1B,SAASC,EAAiBC,GAC7B,MAAO,CACHC,KAfmB,aAgBnBC,QAASF,GClBjB,IAAMG,EAAe,CACjBC,MAAOC,OAAOC,KAAKC,OAAOC,cAAcC,KAAI,SAAAC,GAAI,OAAIH,OAAOC,aAAaG,QAAQD,MAAOE,OACvFC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,KAAM,GACNC,MAAO,GACPC,OAAQ,GACRC,YAAa,GACbC,WAAY,GACZC,eAAgB,GAChBC,aAAc,I,mECVGC,E,YACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAwDVC,cAAgB,SAACC,GACb,EAAKC,SAAS,CACVC,MAAOF,KA3DI,EA+DnBG,aAAe,SAACH,GACZ,EAAKC,SAAS,CACVvB,MAAM,GAAD,mBAAM,EAAK0B,MAAM1B,OAAjB,CAAwBsB,OA9DjC,EAAKI,MAAQ,CACTF,MAAO,GACPG,YAAa,CAAC,SAAU,SAAU,SAAU,OAAQ,QAAS,UAC7D3B,MAAM,YAAK,EAAKoB,MAAMpB,QANX,E,iFAqBX4B,KAAKR,MAAMX,OAAOoB,QAClBD,KAAKR,MAAMU,c,+BAIT,IAAD,OACAN,EAASI,KAAKF,MAAdF,MADA,EAEuBI,KAAKR,MAA5BW,EAFA,EAEAA,aAAc/B,EAFd,EAEcA,MACfgC,EAAYR,GAAmB,OAAVA,EAAiBI,KAAKR,MAAMI,EAAMS,eAAe5B,KAAI,SAACC,EAAM4B,GACjF,IAAIC,EAAanC,EAAMoC,SAAS9B,GAAQ,QAAU,OAClD,OACI,wBAAI+B,UAAU,SAASC,IAAKJ,EAAI,KAC5B,4BAAQG,UAAWF,EAAYI,QAAS,WAAOR,EAAazB,GAAO,EAAKmB,aAAanB,KAAS6B,GAC9F,2BAAI7B,OAEV,GACFqB,EAAcC,KAAKF,MAAMC,YAAYtB,KAAI,SAACiB,EAAMY,GAAP,OAC7C,wBAAII,IAAKJ,EAAE,KACP,2BAAOrC,KAAK,QAAQ2C,GAAIlB,EAAMmB,KAAK,aAAaC,MAAOpB,IACvD,2BAAOiB,QAAS,kBAAM,EAAKlB,cAAcC,IAAOqB,QAASrB,GAAOA,OAIpE,OACI,yBAAKkB,GAAG,SACJ,wBAAIH,UAAU,gBACTV,GAGL,4BACKK,O,gDAzCeZ,EAAOM,GACnC,OAAIN,EAAMpB,QAAU0B,EAAM1B,MACf,CACHA,MAAOoB,EAAMpB,OAGV0B,M,GAjB6BkB,IAAMC,WC4BtD,IACeC,EADQC,aA1BvB,SAAyBrB,GACrB,MAAO,CACHjB,OAAQiB,EAAMjB,OACdC,OAAQgB,EAAMhB,OACdC,OAAQe,EAAMf,OACdC,KAAMc,EAAMd,KACZC,MAAOa,EAAMb,MACbC,OAAQY,EAAMZ,OACdd,MAAO0B,EAAM1B,UAIrB,SAA4BgD,GACxB,MAAO,CACHjB,aAAc,SAACT,GACX0B,EAASrD,EAAiB2B,KAC9BQ,UAAW,WACPkB,EH0ER,uCAAO,WAAOA,GAAP,+BAAAC,EAAA,6DACOC,EAAO,IAAIC,KAGXC,EAFa,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OACpE,OAAQ,SAAU,YAAa,UAAW,WAAY,YACxBF,EAAKG,YAAc,IAAMH,EAAKI,UACtDC,EALP,oGAK0GH,GAL1G,SAMsBI,IAAMC,IAAIF,GANhC,OAUC,IAJMG,EANP,OAOOC,EAAS1D,OAAOC,KAAKwD,EAAOE,KAAKC,MAAMC,OAAO,GAC9CC,EAAaL,EAAOE,KAAKC,MAAMC,MAAMH,GAAQK,QAAQC,MAAM,QAC3DC,EAAa,CAAC,GAAI,GAAI,IACnBhC,EAAE,EAAGA,EAAEgC,EAAWrC,OAAQK,IAC3BiC,EAAaD,EAAWhC,IAC5BiC,EAAaJ,EAAW7B,EAAI,GAAG+B,MAAM,SAAS5D,KAAI,SAAAC,GAAI,OAAIA,EAAK8D,MAAM,OAC1D,GAAKD,EAAW,GAAGF,MAAM,QAAQ,GAC5CE,EAAaA,EAAWC,MAAM,EAAGD,EAAWtC,OAAS,GACrDqC,EAAWhC,GAAKiC,EAEpBnB,EAzED,CACHnD,KAlCuC,kCAmCvCC,QAAS,CACLY,QAJsC2D,EA0EK,CACvC5D,OAAQyD,EAAW,GACnBxD,OAAQwD,EAAW,GACnBvD,OAAQuD,EAAW,KAzEXxD,OACZC,OAAQ0D,EAAI1D,OACZF,OAAQ4D,EAAI5D,UAmDb,kCAzDJ,IAA2C4D,IAyDvC,OAAP,mDAAM,IGzEErB,EHmGR,uCAAO,WAAOA,GAAP,iBAAAC,EAAA,6DACGM,EADH,+FACiGe,mHAAYC,qBAD7G,SAEkBf,IAAMC,IAAIF,GAF5B,OAEGG,EAFH,OAGHV,EA1EG,CACHnD,KA5CuB,kBA6CvBC,QAwE6B4D,EAAOE,KAAK,GAAGY,WAHzC,2CAAP,mDAAM,IGlGExB,EH0GR,uCAAO,WAAOA,GAAP,iBAAAC,EAAA,6DACGM,EADH,+FACiGe,mHAAYC,qBAD7G,SAEkBf,IAAMC,IAAIF,GAF5B,OAEGG,EAFH,OAGHV,EA3EG,CACHnD,KAlDwB,mBAmDxBC,QAyE8B4D,EAAOE,KAAK,GAAGa,YAH1C,2CAAP,mDAAM,IGzGEzB,EHiHR,uCAAO,WAAOA,GAAP,iBAAAC,EAAA,6DACGM,EADH,+FACiGe,mHAAYC,qBAD7G,SAEkBf,IAAMC,IAAIF,GAF5B,OAEGG,EAFH,OAGHV,EA5EG,CACHnD,KAxDyB,oBAyDzBC,QA0E+B4D,EAAOE,KAAK,GAAGY,WAH3C,2CAAP,mDAAM,QG1GK1B,CAAe3B,GCZ9B,IACe2B,EADQC,aAfvB,SAAyBrB,GACrB,MAAO,CACHgD,WAAYhD,EAAM1B,UAI1B,SAA4BgD,GACxB,MAAO,CACH2B,aAAc,SAACnC,EAAIlB,GACf0B,EJUL,SAAyBR,EAAIlB,GAChC,MAAO,CACHzB,KArBkB,aAsBlBC,QAAS,CAAC0C,KAAIlB,SIbDsD,CAAgBpC,EAAIlB,KAEjCuD,YAAa,kBAAM7B,EJgBhB,CACHnD,KA3BoB,qBIebiD,EClBA,YAAmE,IAAzC4B,EAAwC,EAAxCA,WAAYC,EAA4B,EAA5BA,aAAcE,EAAc,EAAdA,YACzDC,EAAkBJ,EAAaA,EAAWrE,KAAI,SAACC,EAAM4B,GAAP,OAAa,wBAAIG,UAAU,SAASC,IAAKJ,EAAI,KAAK,4BAAQK,QAAS,kBAAMoC,EAAazC,EAAG5B,KAAvC,UAArC,IAAoGA,MAAc,GACnL,OACI,yBAAKkC,GAAG,SACJ,4BAAQD,QAASsC,GAAjB,sBACA,2CACA,4BACKC,OCPIC,E,YACjB,WAAY3D,GAAQ,IAAD,8BACf,4CAAMA,KAgEVC,cAAgB,SAACC,GACb,EAAKC,SAAS,CACVC,MAAOF,KAnEI,EAuEnBG,aAAe,SAACH,GACZ,EAAKC,SAAS,CACVvB,MAAM,GAAD,mBAAM,EAAK0B,MAAM1B,OAAjB,CAAwBsB,OAtEjC,EAAKI,MAAQ,CACTF,MAAO,GACPG,YAAa,CAAC,cAAe,cAC7B3B,MAAM,YAAK,EAAKoB,MAAMpB,QANX,E,iFAoBE,IAAD,EACiD4B,KAAKR,MAA/DL,EADS,EACTA,YAAaC,EADJ,EACIA,WAAYgE,EADhB,EACgBA,eAAgBC,EADhC,EACgCA,cAC5ClE,EAAYc,QACZmD,IAEChE,EAAWa,QACZoD,M,+BAIE,IAAD,SACyBrD,KAAKR,MAA5BW,EADF,EACEA,aAAc/B,EADhB,EACgBA,MACdwB,EAASI,KAAKF,MAAdF,MACD0D,EAAW1D,EAAQI,KAAKR,MAAMI,GAAOnB,KAAI,SAACC,EAAM4B,GAClD,IAAIC,EAAanC,EAAMoC,SAAS9B,EAAK6E,OAAS,QAAU,OACxD,OACI,wBAAI7C,IAAKJ,EAAI,IAAKG,UAAU,UACxB,4BAAQA,UAAWF,EAAYI,QAAS,WAAOR,EAAazB,EAAK6E,OAAQ,EAAK1D,aAAanB,EAAK6E,SAAUhD,GAC1G,uBAAGiD,KAAM9E,EAAKiD,IAAK8B,IAAI,sBAAsBC,OAAO,UAApD,IAA+DhF,EAAK6E,WAE1E,GAEFxD,EAAcC,KAAKF,MAAMC,YAAYtB,KAAI,SAACiB,EAAMY,GAChD,IAAIqD,EAAuB,eAATjE,EAAwB,SAAoB,gBAATA,EAAyB,OAAS,GACvF,OACI,wBAAIgB,IAAKJ,EAAE,KACP,2BAAOrC,KAAK,QAAQ2C,GAAIlB,EAAMmB,KAAK,aAAaC,MAAOpB,IACvD,2BAAOiB,QAAS,kBAAM,EAAKlB,cAAcC,IAAOqB,QAASrB,GAAOiE,OAI5E,OACI,yBAAK/C,GAAG,QACJ,wBAAIH,UAAU,gBACTV,GAGL,4BACKuD,GAEJA,EAASrD,OAAS,EAAI,0DAA0C,O,gDAlD7CT,EAAOM,GACnC,OAAIN,EAAMpB,QAAU0B,EAAM1B,MACf,CACHA,MAAOoB,EAAMpB,OAGV0B,M,GAjBuBkB,IAAMC,WCkBhD,IACeC,EADQC,aAhBvB,SAAyBrB,GACrB,MAAO,CACHX,YAAaW,EAAMX,YACnBC,WAAYU,EAAMV,WAClBhB,MAAO0B,EAAM1B,UAIrB,SAA4BgD,GACxB,MAAO,CACHjB,aAAc,SAACT,GAAU0B,EAASrD,EAAiB2B,KACnD0D,eAAgB,kBAAMhC,EPkI1B,uCAAO,WAAOA,GAAP,iBAAAC,EAAA,6DACGM,EADH,gFACkFe,mHAAYkB,uBAD9F,SAEkBhC,IAAMC,IAAIF,GAF5B,OAEGG,EAFH,OAGHV,EA7EG,CACHnD,KA9D8B,yBA+D9BC,QA2E8B4D,EAAOE,KAAK6B,WAHvC,2CAAP,mDAAM,KOjIFR,cAAe,kBAAMjC,EPyIzB,uCAAO,WAAOA,GAAP,iBAAAC,EAAA,6DACGM,EADH,gEACkEe,mHAAYkB,uBAD9E,SAEkBhC,IAAMC,IAAIF,GAF5B,OAEGG,EAFH,OAGHV,EA9EG,CACHnD,KApE6B,wBAqE7BC,QA4E6B4D,EAAOE,KAAK6B,WAHtC,2CAAP,mDAAM,QOpIK3C,CAAe4C,GClBf,SAASC,IACpB,OACI,wBAAInD,GAAG,OACH,yBAAKH,UAAU,gBACX,yBAAKuD,IAA8B,aAAcC,IAAI,UAEzD,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,oBACA,kBAAC,IAAD,CAAMA,GAAG,SAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,U,YCKZ,IACehD,EADQC,aAbvB,SAAyBrB,GACrB,MAAO,CACHqE,SAAUrE,EAAMT,eAChB+E,OAAQtE,EAAMR,iBAItB,SAA4B8B,GACxB,MAAO,CACHiD,kBAAmB,SAACC,GAAD,OAAYlD,ETmJhC,SAAsCkD,GACzC,8CAAO,WAAOlD,GAAP,iBAAAC,EAAA,6DACGM,EADH,+FACiG2C,GADjG,SAEkB1C,IAAMC,IAAIF,GAF5B,OAEGG,EAFH,OAGHV,EA/EG,CACHnD,KA1E2B,sBA2E3BC,QA6EiC,CAAC4D,EAAOE,KAAK,GAAGmC,SAAS,GAAIrC,EAAOE,KAAK,GAAGoC,OAAO,MAHjF,2CAAP,mDAAM,GSpJsCG,CAA6BD,QAK9DpD,ECfA,YAAsD,IAAvCiD,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,kBAAoB,EACpCG,oBAAS,GAD2B,mBACzDC,EADyD,KACjDC,EADiD,KAMhE,OAJAC,qBAAU,WACNN,EAAkB3B,mHAAYC,uBAC/B,IAGC,yBAAK/B,GAAG,QACJ,yBAAKA,GAAG,WACJ,kDACA,0DAEA,2BAAIuD,GACHM,EAAS,2BAAIL,GAAc,uBAAGzD,QAAS,kBAAM+D,GAAU,KAA5B,iCCDtCE,EAAkBrG,OAAOsG,sCAAwCC,IACjEC,EAAQC,aVDC,WAAoD,IAA7BlF,EAA4B,uDAAtB3B,EAAc8G,EAAQ,uCAC1DC,EAAQ,eAAOpF,GAEnB,OAAOmF,EAAOhH,MACV,IDhBmB,aCiBf,GAAIiH,EAAS9G,MAAMoC,SAASyE,EAAO/G,SAC/B,MAEAgH,EAAS9G,MAAM+G,KAAKF,EAAO/G,SAC3BK,OAAOC,aAAa4G,QAAQH,EAAO/G,QAAS+G,EAAO/G,SACnD,MAER,IDvBkB,aCwBd,IAAME,EAAK,YAAO8G,EAAS9G,OAC3BA,EAAMiH,OAAOJ,EAAO/G,QAAQ0C,GAAI,GAChCsE,EAAS9G,MAAQA,EACjBG,OAAOC,aAAa8G,WAAWL,EAAO/G,QAAQwB,MAC9C,MACJ,ID5BoB,eC6BhBwF,EAAS9G,MAAQ,GACjBG,OAAOC,aAAa+G,QACpB,MACJ,ID/BuC,kCCgCnCL,EAASrG,OAASoG,EAAO/G,QAAQW,OACjCqG,EAASpG,OAASmG,EAAO/G,QAAQY,OACjCoG,EAASnG,OAASkG,EAAO/G,QAAQa,OACjC,MACJ,IDnCuB,kBCoCnBmG,EAASlG,KAAOiG,EAAO/G,QACvB,MACJ,IDrCwB,mBCsCpBgH,EAASjG,MAAQgG,EAAO/G,QACxB,MACJ,IDvCyB,oBCwCrBgH,EAAShG,OAAS+F,EAAO/G,QACzB,MACJ,IDxC6B,wBCyCzBgH,EAAS9F,WAAa6F,EAAO/G,QAC7B,MACJ,ID5C8B,yBC6C1BgH,EAAS/F,YAAc8F,EAAO/G,QAC9B,MACJ,ID7C2B,sBC8CvBgH,EAAS7F,eAAiB4F,EAAO/G,QAAQ,GACzCgH,EAAS5F,aAAe2F,EAAO/G,QAAQ,GAM/C,OAAOgH,IUjD8BN,EAAgBY,YAAgBC,OAkB1DC,MAhBf,WACE,OACE,kBAAC,IAAD,CAAUX,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAChB,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO4B,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWtG,IAChC,kBAAC,IAAD,CAAOqG,KAAK,SAASC,UAAWE,IAChC,kBAAC,IAAD,CAAOH,KAAK,QAAQC,UAAW/B,QCfrBkC,QACW,cAA7BzH,OAAO0H,SAASC,UAEe,UAA7B3H,OAAO0H,SAASC,UAEhB3H,OAAO0H,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ff04f85f.chunk.js","sourcesContent":["import axios from 'axios';\nconst dotenv = require('dotenv').config();\n\nexport const SAVE_TRIVIA = 'ADD_TRIVIA';\nexport const DEL_TRIVIA = 'DEL_TRIVIA';\nexport const RESET_TRIVIA = 'RESET_TRIVIA';\nexport const SET_TRIVIA_BIRTHS_DEATHS_EVENTS = 'SET_TRIVIA_BIRTHS_DEATHS_EVENTS';\nexport const SET_TRIVIA_FILM = 'SET_TRIVIA_FILM';\nexport const SET_TRIVIA_MUSIC = 'SET_TRIVIA_MUSIC';\nexport const SET_TRIVIA_SPORTS = 'SET_TRIVIA_SPORTS';\nexport const SET_TRIVIA_CURRENTNEWS = 'SET_TRIVIA_CURRENTNEWS';\nexport const SET_TRIVIA_SPORTSNEWS = 'SET_TRIVIA_SPORTSNEWS';\nexport const SET_QUESTION_ANSWER = 'SET_QUESTION_ANSWER';\n\n\n// save trivia actions\nexport function actionSaveTrivia(trivia) {\n    return {\n        type: SAVE_TRIVIA,\n        payload: trivia\n    }\n}\n\nexport function actionDelTrivia(id, text) {\n    return {\n        type: DEL_TRIVIA,\n        payload: {id, text}\n    }\n}\n\nexport function actionResetTrivia() {\n    return {\n        type: RESET_TRIVIA\n    }\n}\n\n\n// set trivia actions\nexport function actionSetTriviaBirthsDeathsEvents(obj) {\n    return {\n        type: SET_TRIVIA_BIRTHS_DEATHS_EVENTS,\n        payload: {\n            births: obj.births,\n            deaths: obj.deaths,\n            events: obj.events\n        }\n    }\n}\n\nexport function actionSetTriviaFilm(filmTrivia) {\n    return {\n        type: SET_TRIVIA_FILM,\n        payload: filmTrivia\n    }\n}\n\nexport function actionSetTriviaMusic(musicTrivia) {\n    return {\n        type: SET_TRIVIA_MUSIC,\n        payload: musicTrivia\n    }\n}\n\nexport function actionSetTriviaSports(sportsTrivia) {\n    return {\n        type: SET_TRIVIA_SPORTS,\n        payload: sportsTrivia\n    }\n}\n\nexport function actionSetCurrentNews(currentNews) {\n    return {\n        type: SET_TRIVIA_CURRENTNEWS,\n        payload: currentNews\n    }\n}\n\nexport function actionSetSportsNews(sportsNews) {\n    return {\n        type: SET_TRIVIA_SPORTSNEWS,\n        payload: sportsNews\n    }\n}\n\nexport function actionSetQuestionAnswer(arr) {\n    return {\n        type: SET_QUESTION_ANSWER,\n        payload: arr\n    }\n}\n\n\n// async actions\n\nexport function asyncActionGetTriviaBirthsDeathsEvents() {\n    return async (dispatch) => {\n            const date = new Date();\n            const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]; // used in the next line to turn getMonth into string\n            const todayTitle = monthNames[date.getMonth()] + \" \" + date.getDate(); // returns \"February 19\" or \"March 1\"\n            const url = `https://en.wikipedia.org/w/api.php?origin=*&format=json&action=query&prop=extracts&titles=${todayTitle}`;\n            const result = await axios.get(url);\n            const pageId = Object.keys(result.data.query.pages)[0]; // gets the key value for pageId, which is needed to grab the necessary data\n            const listWithLI = result.data.query.pages[pageId].extract.split(\"<h2>\"); // breaks the wiki into parts \n            const todaysData = [[], [], []]; // creating array of arrays to hold string data in next for loop\n            for (let i=0; i<todaysData.length; i++) {\n                let currentArr = todaysData[i]; // makes code slightly more readable\n                currentArr = listWithLI[i + 1].split(\"</li>\").map(item => item.slice(5)); // splits out all the <li> components in section and cleans them up \n                currentArr[0] = currentArr[0].split('<li>')[1]; // cleans up first item that has all text prior to <li> components\n                currentArr = currentArr.slice(0, currentArr.length - 2); // gets rid of blank items\n                todaysData[i] = currentArr; // makes sure that the array is assigned the correct value (reference vs true types)\n            }\n            dispatch(actionSetTriviaBirthsDeathsEvents({\n                events: todaysData[0],\n                births: todaysData[1],\n                deaths: todaysData[2]\n            }))\n    }\n}\n\nexport function asyncActionGetTriviaFilm() {\n    return async (dispatch) => {\n        const url = `https://api.apify.com/v2/actor-tasks/NHADsLTRDGnTZJhPu/runs/last/dataset/items?token=${process.env.REACT_APP_APIFY_KEY}`;\n        const result = await axios.get(url);\n        dispatch(actionSetTriviaFilm(result.data[0].linkData));\n    }\n}\n\nexport function asyncActionGetTriviaMusic() {\n    return async (dispatch) => {\n        const url = `https://api.apify.com/v2/actor-tasks/QjL2MXmqzG6zHXaGr/runs/last/dataset/items?token=${process.env.REACT_APP_APIFY_KEY}`;\n        const result = await axios.get(url);\n        dispatch(actionSetTriviaMusic(result.data[0].musicData));\n    }\n}\n\nexport function asyncActionGetTriviaSports() {\n    return async (dispatch) => {\n        const url = `https://api.apify.com/v2/actor-tasks/J5K8SwHCw5kWjSdPb/runs/last/dataset/items?token=${process.env.REACT_APP_APIFY_KEY}`;\n        const result = await axios.get(url);\n        dispatch(actionSetTriviaSports(result.data[0].linkData));\n    }\n}\n\nexport function asyncActionGetCurrentNews() {\n    return async (dispatch) => {\n        const url = `http://newsapi.org/v2/top-headlines?country=us&category=sports&apiKey=${process.env.REACT_APP_newsAPI_KEY}`;\n        const result = await axios.get(url);\n        dispatch(actionSetCurrentNews(result.data.articles));\n    }\n}\n\nexport function asyncActionGetSportsNews() {\n    return async (dispatch) => {\n        const url = `http://newsapi.org/v2/top-headlines?country=us&apiKey=${process.env.REACT_APP_newsAPI_KEY}`;\n        const result = await axios.get(url);\n        dispatch(actionSetSportsNews(result.data.articles));\n    }\n}\n\nexport function asyncActionGetQuestionAnswer(apikey) {\n    return async (dispatch) => {\n        const url = `https://api.apify.com/v2/actor-tasks/7GCxpRZuB3myEffh6/runs/last/dataset/items?token=${apikey}`;\n        const result = await axios.get(url);\n        dispatch(actionSetQuestionAnswer([result.data[0].question[0], result.data[0].answer[0]]))\n    }\n}","import {SAVE_TRIVIA, DEL_TRIVIA, RESET_TRIVIA, SET_TRIVIA_BIRTHS_DEATHS_EVENTS, SET_TRIVIA_FILM, SET_TRIVIA_MUSIC, SET_TRIVIA_SPORTSNEWS, SET_TRIVIA_SPORTS, SET_TRIVIA_CURRENTNEWS, SET_QUESTION_ANSWER } from './actions';\nconst defaultState = {\n    saved: Object.keys(window.localStorage).map(item => window.localStorage.getItem(item)).sort(),\n    events: [],\n    births: [],\n    deaths: [],\n    film: [],\n    music: [],\n    sports: [],\n    currentNews: [],\n    sportsNews: [],\n    randomQuestion: \"\",\n    randomAnswer: \"\"\n};\n\nexport default function triviaReducer(state=defaultState, action) {\n    let newState = {...state};\n\n    switch(action.type) {\n        case SAVE_TRIVIA:\n            if (newState.saved.includes(action.payload)) {\n                break;\n            } else {\n                newState.saved.push(action.payload);\n                window.localStorage.setItem(action.payload, action.payload);\n                break;\n            }\n        case DEL_TRIVIA:\n            const saved = [...newState.saved];\n            saved.splice(action.payload.id, 1);\n            newState.saved = saved;\n            window.localStorage.removeItem(action.payload.text);\n            break;\n        case RESET_TRIVIA:\n            newState.saved = [];\n            window.localStorage.clear();\n            break;\n        case SET_TRIVIA_BIRTHS_DEATHS_EVENTS:\n            newState.events = action.payload.events;\n            newState.births = action.payload.births;\n            newState.deaths = action.payload.deaths;\n            break;\n        case SET_TRIVIA_FILM:\n            newState.film = action.payload;\n            break;\n        case SET_TRIVIA_MUSIC:\n            newState.music = action.payload;\n            break;\n        case SET_TRIVIA_SPORTS:\n            newState.sports = action.payload;\n            break;\n        case SET_TRIVIA_SPORTSNEWS:\n            newState.sportsNews = action.payload;\n            break;\n        case SET_TRIVIA_CURRENTNEWS:\n            newState.currentNews = action.payload;\n            break;\n        case SET_QUESTION_ANSWER:\n            newState.randomQuestion = action.payload[0];\n            newState.randomAnswer = action.payload[1];\n            break;\n        default:\n            break;\n    }\n\n    return newState;\n}","import React from 'react';\n\nexport default class TodayInHistoryList extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            topic: \"\",\n            optionsList: ['Events', 'Births', 'Deaths', 'Film', 'Music', 'Sports'],\n            saved: [...this.props.saved]\n        }\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.saved !== state.saved) {\n            return {\n                saved: props.saved\n            }\n        } else {\n            return state;\n        }\n    }\n\n    componentDidMount() {\n        if(!this.props.events.length) {\n            this.props.getTrivia();\n        }\n    }\n\n    render() {\n        let {topic} = this.state;\n        let {handleSelect, saved} = this.props;\n        let topicList = topic && topic !== \"--\" ? this.props[topic.toLowerCase()].map((item, i) => {\n            let buttonText = saved.includes(item) ? \"Saved\" : \"Save\";\n            return (\n                <li className=\"trivia\" key={i + \"A\"} >\n                    <button className={buttonText} onClick={() => {handleSelect(item); this._updateSaved(item)}}>{buttonText}</button>\n                    <p>{item}</p>\n                </li>\n        )}) : \"\";\n        let optionsList = this.state.optionsList.map((text, i) => (\n        <li key={i+\"C\"}>\n            <input type=\"radio\" id={text} name=\"triviaType\" value={text} />\n            <label onClick={() => this._handleToggle(text)} htmlFor={text}>{text}</label>\n        </li>\n        ));\n\n        return (\n            <div id=\"today\">\n                <ul className='radioToolbar'>\n                    {optionsList}\n                </ul>\n\n                <ul>\n                    {topicList}\n                </ul>\n            </div>\n        );\n    }\n\n    _handleToggle = (text) => {\n        this.setState({\n            topic: text\n        })\n    }\n\n    _updateSaved = (text) => {\n        this.setState({\n            saved: [...this.state.saved, text]\n        })\n    }\n}","import {connect} from 'react-redux';\nimport { actionSaveTrivia, asyncActionGetTriviaBirthsDeathsEvents, asyncActionGetTriviaFilm, asyncActionGetTriviaMusic, asyncActionGetTriviaSports } from '../actions';\nimport TodayInHistoryList from '../components/TodayInHistoryList';\n\nfunction mapStateToProps(state) {\n    return {\n        events: state.events,\n        births: state.births,\n        deaths: state.deaths,\n        film: state.film,\n        music: state.music,\n        sports: state.sports,\n        saved: state.saved\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        handleSelect: (text) => {\n            dispatch(actionSaveTrivia(text))},\n        getTrivia: () => {\n            dispatch(asyncActionGetTriviaBirthsDeathsEvents());\n            dispatch(asyncActionGetTriviaFilm());\n            dispatch(asyncActionGetTriviaMusic());\n            dispatch(asyncActionGetTriviaSports());\n        }\n\n    }\n}\n\nconst reduxConnector = connect(mapStateToProps, mapDispatchToProps);\nexport default reduxConnector(TodayInHistoryList);","import {connect} from 'react-redux';\nimport { actionDelTrivia, actionResetTrivia } from '../actions';\nimport SavedTriviaList from '../components/SavedTriviaList';\n\nfunction mapStateToProps(state) {\n    return {\n        triviaList: state.saved\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        handleDelete: (id, text) => {\n            dispatch(actionDelTrivia(id, text));\n        },\n        handleReset: () => dispatch(actionResetTrivia())\n    }\n}\n\nconst reduxConnector = connect(mapStateToProps, mapDispatchToProps);\nexport default reduxConnector(SavedTriviaList);","import React from 'react';\n\nexport default function SavedTriviaList({triviaList, handleDelete, handleReset}) {\n    const triviaListItems = triviaList ? triviaList.map((item, i) => <li className=\"trivia\" key={i + \"D\"}><button onClick={() => handleDelete(i, item)}>Delete</button> {item}</li>) : [];\n    return (\n        <div id=\"saved\">\n            <button onClick={handleReset}>Reset Saved Trivia</button>\n            <h2>Saved Items</h2>\n            <ul>\n                {triviaListItems}\n            </ul>\n        </div>\n    );\n}","import React from 'react';\n\nexport default class RecentSports extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            topic: \"\",\n            optionsList: ['currentNews', 'sportsNews'],\n            saved: [...this.props.saved]\n        }\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.saved !== state.saved) {\n            return {\n                saved: props.saved\n            }\n        } else {\n            return state;\n        }\n    }\n\n    componentDidMount() {\n        const {currentNews, sportsNews, getCurrentNews, getSportsNews} = this.props;\n        if(!currentNews.length) {\n            getCurrentNews();\n        }\n        if (!sportsNews.length) {\n            getSportsNews();\n        }\n    }\n\n    render() {\n        const {handleSelect, saved} = this.props;\n        const {topic} = this.state;\n        const newsList = topic ? this.props[topic].map((item, i) => {\n            let buttonText = saved.includes(item.title) ? \"Saved\" : \"Save\";\n            return (\n                <li key={i + \"E\"} className=\"trivia\">\n                    <button className={buttonText} onClick={() => {handleSelect(item.title); this._updateSaved(item.title)}}>{buttonText}</button>\n                    <a href={item.url} rel='noopener noreferrer' target=\"_blank\"> {item.title}</a>\n                </li>\n        )}) : \"\";\n\n        let optionsList = this.state.optionsList.map((text, i) => {\n            let displayText = text === \"sportsNews\" ? \"Sports\" : text === \"currentNews\" ? \"U.S.\" : \"\";\n            return (\n                <li key={i+\"C\"}>\n                    <input type=\"radio\" id={text} name=\"triviaType\" value={text} />\n                    <label onClick={() => this._handleToggle(text)} htmlFor={text}>{displayText}</label>\n                </li>\n            )});\n\n        return (\n            <div id=\"news\">\n                <ul className=\"radioToolbar\">\n                    {optionsList}\n                </ul>\n\n                <ul>\n                    {newsList}\n                </ul>\n                {newsList.length > 0 ? <footer>Powered by NewsApi.Org</footer> : \"\"}\n            </div>\n        )\n    }\n\n    _handleToggle = (text) => {\n        this.setState({\n            topic: text\n        })\n    }\n    \n    _updateSaved = (text) => {\n        this.setState({\n            saved: [...this.state.saved, text]\n        })\n    }\n}","import {connect} from 'react-redux';\nimport { actionSaveTrivia, asyncActionGetSportsNews, asyncActionGetCurrentNews } from '../actions';\nimport CurrentEventsList from '../components/CurrentEventsList';\n\nfunction mapStateToProps(state) {\n    return {\n        currentNews: state.currentNews,\n        sportsNews: state.sportsNews,\n        saved: state.saved\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        handleSelect: (text) => {dispatch(actionSaveTrivia(text))},\n        getCurrentNews: () => dispatch(asyncActionGetCurrentNews()),\n        getSportsNews: () => dispatch(asyncActionGetSportsNews())\n    }\n}\n\nconst reduxConnector = connect(mapStateToProps, mapDispatchToProps);\nexport default reduxConnector(CurrentEventsList);","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nexport default function Nav() {\n    return (\n        <ul id=\"nav\">\n            <div className=\"pictureFrame\">\n                <img src={process.env.PUBLIC_URL + '/study.png'} alt=\"logo\" />\n            </div>\n            <Link to=\"/\">Home</Link>\n            <Link to=\"/today\">Today in History</Link>\n            <Link to=\"/news\">News</Link>\n            <Link to=\"/saved\">Saved</Link>\n        </ul>\n    );\n}","import {connect} from 'react-redux';\nimport { asyncActionGetQuestionAnswer } from '../actions';\nimport Home from '../components/Home';\n\nfunction mapStateToProps(state) {\n    return {\n        question: state.randomQuestion,\n        answer: state.randomAnswer\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        getQuestionAnswer: (apikey) => dispatch(asyncActionGetQuestionAnswer(apikey))\n    }\n}\n\nconst reduxConnector = connect(mapStateToProps, mapDispatchToProps);\nexport default reduxConnector(Home);","import React, { useState, useEffect } from 'react';\n\n\nexport default function Home({question, answer, getQuestionAnswer}) {\n    const [hidden, setHidden] = useState(false);\n    useEffect(() => {\n        getQuestionAnswer(process.env.REACT_APP_APIFY_KEY);\n    }, []);\n\n    return (\n        <div id=\"home\">\n            <div id=\"overlay\">\n                <h1>Trivia Study Guide</h1>\n                <h2>Your guide to acing trivia</h2>\n\n                <p>{question}</p>\n                {hidden ? <p>{answer}</p> : <p onClick={() => setHidden(true)}>Click Here To See Answer</p>}\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport './App.css';\nimport {createStore, applyMiddleware, compose} from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport triviaReducer from './reducers';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\nimport TodayInHistoryList from './containers/TodayInHistoryListContainer';\nimport SavedTriviaList from './containers/SavedTriviaListContainer';\nimport CurrentEventsList from './containers/CurrentEventsListContainer';\nimport Nav from './components/Nav';\nimport Home from './containers/HomeContainer';\n\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(triviaReducer, composeEnhancer(applyMiddleware(ReduxThunk)));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <Nav />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/today\" component={TodayInHistoryList} />\n          <Route path=\"/saved\" component={SavedTriviaList} />\n          <Route path=\"/news\" component={CurrentEventsList} />\n        </Switch>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}